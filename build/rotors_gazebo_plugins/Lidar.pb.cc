// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Lidar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Lidar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lidar_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* lidar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lidar_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Lidar_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Lidar_2eproto() {
  protobuf_AddDesc_Lidar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Lidar.proto");
  GOOGLE_CHECK(file != NULL);
  lidar_descriptor_ = file->message_type(0);
  static const int lidar_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lidar, time_msec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lidar, min_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lidar, max_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lidar, current_distance_),
  };
  lidar_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      lidar_descriptor_,
      lidar::default_instance_,
      lidar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lidar, _has_bits_[0]),
      -1,
      -1,
      sizeof(lidar),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lidar, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Lidar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      lidar_descriptor_, &lidar::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Lidar_2eproto() {
  delete lidar::default_instance_;
  delete lidar_reflection_;
}

void protobuf_AddDesc_Lidar_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Lidar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Lidar.proto\022\017lidar_msgs.msgs\"`\n\005lidar\022"
    "\021\n\ttime_msec\030\001 \002(\002\022\024\n\014min_distance\030\002 \002(\002"
    "\022\024\n\014max_distance\030\003 \002(\002\022\030\n\020current_distan"
    "ce\030\004 \002(\002", 128);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Lidar.proto", &protobuf_RegisterTypes);
  lidar::default_instance_ = new lidar();
  lidar::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Lidar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Lidar_2eproto {
  StaticDescriptorInitializer_Lidar_2eproto() {
    protobuf_AddDesc_Lidar_2eproto();
  }
} static_descriptor_initializer_Lidar_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lidar::kTimeMsecFieldNumber;
const int lidar::kMinDistanceFieldNumber;
const int lidar::kMaxDistanceFieldNumber;
const int lidar::kCurrentDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lidar::lidar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lidar_msgs.msgs.lidar)
}

void lidar::InitAsDefaultInstance() {
}

lidar::lidar(const lidar& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lidar_msgs.msgs.lidar)
}

void lidar::SharedCtor() {
  _cached_size_ = 0;
  time_msec_ = 0;
  min_distance_ = 0;
  max_distance_ = 0;
  current_distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lidar::~lidar() {
  // @@protoc_insertion_point(destructor:lidar_msgs.msgs.lidar)
  SharedDtor();
}

void lidar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lidar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lidar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lidar_descriptor_;
}

const lidar& lidar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Lidar_2eproto();
  return *default_instance_;
}

lidar* lidar::default_instance_ = NULL;

lidar* lidar::New(::google::protobuf::Arena* arena) const {
  lidar* n = new lidar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void lidar::Clear() {
// @@protoc_insertion_point(message_clear_start:lidar_msgs.msgs.lidar)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(lidar, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<lidar*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_msec_, current_distance_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool lidar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lidar_msgs.msgs.lidar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float time_msec = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_msec_)));
          set_has_time_msec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_min_distance;
        break;
      }

      // required float min_distance = 2;
      case 2: {
        if (tag == 21) {
         parse_min_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_distance_)));
          set_has_min_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_max_distance;
        break;
      }

      // required float max_distance = 3;
      case 3: {
        if (tag == 29) {
         parse_max_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_distance_)));
          set_has_max_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_current_distance;
        break;
      }

      // required float current_distance = 4;
      case 4: {
        if (tag == 37) {
         parse_current_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_distance_)));
          set_has_current_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lidar_msgs.msgs.lidar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lidar_msgs.msgs.lidar)
  return false;
#undef DO_
}

void lidar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lidar_msgs.msgs.lidar)
  // required float time_msec = 1;
  if (has_time_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->time_msec(), output);
  }

  // required float min_distance = 2;
  if (has_min_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_distance(), output);
  }

  // required float max_distance = 3;
  if (has_max_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_distance(), output);
  }

  // required float current_distance = 4;
  if (has_current_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->current_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lidar_msgs.msgs.lidar)
}

::google::protobuf::uint8* lidar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lidar_msgs.msgs.lidar)
  // required float time_msec = 1;
  if (has_time_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->time_msec(), target);
  }

  // required float min_distance = 2;
  if (has_min_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_distance(), target);
  }

  // required float max_distance = 3;
  if (has_max_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_distance(), target);
  }

  // required float current_distance = 4;
  if (has_current_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->current_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lidar_msgs.msgs.lidar)
  return target;
}

int lidar::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lidar_msgs.msgs.lidar)
  int total_size = 0;

  if (has_time_msec()) {
    // required float time_msec = 1;
    total_size += 1 + 4;
  }

  if (has_min_distance()) {
    // required float min_distance = 2;
    total_size += 1 + 4;
  }

  if (has_max_distance()) {
    // required float max_distance = 3;
    total_size += 1 + 4;
  }

  if (has_current_distance()) {
    // required float current_distance = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
int lidar::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lidar_msgs.msgs.lidar)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float time_msec = 1;
    total_size += 1 + 4;

    // required float min_distance = 2;
    total_size += 1 + 4;

    // required float max_distance = 3;
    total_size += 1 + 4;

    // required float current_distance = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lidar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lidar_msgs.msgs.lidar)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const lidar* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const lidar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lidar_msgs.msgs.lidar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lidar_msgs.msgs.lidar)
    MergeFrom(*source);
  }
}

void lidar::MergeFrom(const lidar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lidar_msgs.msgs.lidar)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_msec()) {
      set_time_msec(from.time_msec());
    }
    if (from.has_min_distance()) {
      set_min_distance(from.min_distance());
    }
    if (from.has_max_distance()) {
      set_max_distance(from.max_distance());
    }
    if (from.has_current_distance()) {
      set_current_distance(from.current_distance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void lidar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lidar_msgs.msgs.lidar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lidar::CopyFrom(const lidar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lidar_msgs.msgs.lidar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lidar::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void lidar::Swap(lidar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lidar::InternalSwap(lidar* other) {
  std::swap(time_msec_, other->time_msec_);
  std::swap(min_distance_, other->min_distance_);
  std::swap(max_distance_, other->max_distance_);
  std::swap(current_distance_, other->current_distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata lidar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lidar_descriptor_;
  metadata.reflection = lidar_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// lidar

// required float time_msec = 1;
bool lidar::has_time_msec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void lidar::set_has_time_msec() {
  _has_bits_[0] |= 0x00000001u;
}
void lidar::clear_has_time_msec() {
  _has_bits_[0] &= ~0x00000001u;
}
void lidar::clear_time_msec() {
  time_msec_ = 0;
  clear_has_time_msec();
}
 float lidar::time_msec() const {
  // @@protoc_insertion_point(field_get:lidar_msgs.msgs.lidar.time_msec)
  return time_msec_;
}
 void lidar::set_time_msec(float value) {
  set_has_time_msec();
  time_msec_ = value;
  // @@protoc_insertion_point(field_set:lidar_msgs.msgs.lidar.time_msec)
}

// required float min_distance = 2;
bool lidar::has_min_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void lidar::set_has_min_distance() {
  _has_bits_[0] |= 0x00000002u;
}
void lidar::clear_has_min_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
void lidar::clear_min_distance() {
  min_distance_ = 0;
  clear_has_min_distance();
}
 float lidar::min_distance() const {
  // @@protoc_insertion_point(field_get:lidar_msgs.msgs.lidar.min_distance)
  return min_distance_;
}
 void lidar::set_min_distance(float value) {
  set_has_min_distance();
  min_distance_ = value;
  // @@protoc_insertion_point(field_set:lidar_msgs.msgs.lidar.min_distance)
}

// required float max_distance = 3;
bool lidar::has_max_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void lidar::set_has_max_distance() {
  _has_bits_[0] |= 0x00000004u;
}
void lidar::clear_has_max_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
void lidar::clear_max_distance() {
  max_distance_ = 0;
  clear_has_max_distance();
}
 float lidar::max_distance() const {
  // @@protoc_insertion_point(field_get:lidar_msgs.msgs.lidar.max_distance)
  return max_distance_;
}
 void lidar::set_max_distance(float value) {
  set_has_max_distance();
  max_distance_ = value;
  // @@protoc_insertion_point(field_set:lidar_msgs.msgs.lidar.max_distance)
}

// required float current_distance = 4;
bool lidar::has_current_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void lidar::set_has_current_distance() {
  _has_bits_[0] |= 0x00000008u;
}
void lidar::clear_has_current_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
void lidar::clear_current_distance() {
  current_distance_ = 0;
  clear_has_current_distance();
}
 float lidar::current_distance() const {
  // @@protoc_insertion_point(field_get:lidar_msgs.msgs.lidar.current_distance)
  return current_distance_;
}
 void lidar::set_current_distance(float value) {
  set_has_current_distance();
  current_distance_ = value;
  // @@protoc_insertion_point(field_set:lidar_msgs.msgs.lidar.current_distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace lidar_msgs

// @@protoc_insertion_point(global_scope)
