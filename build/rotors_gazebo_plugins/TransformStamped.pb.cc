// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TransformStamped.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TransformStamped.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gz_geometry_msgs {

namespace {

const ::google::protobuf::Descriptor* TransformStamped_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformStamped_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TransformStamped_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_TransformStamped_2eproto() {
  protobuf_AddDesc_TransformStamped_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TransformStamped.proto");
  GOOGLE_CHECK(file != NULL);
  TransformStamped_descriptor_ = file->message_type(0);
  static const int TransformStamped_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformStamped, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformStamped, transform_),
  };
  TransformStamped_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransformStamped_descriptor_,
      TransformStamped::default_instance_,
      TransformStamped_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformStamped, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransformStamped),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformStamped, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TransformStamped_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransformStamped_descriptor_, &TransformStamped::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TransformStamped_2eproto() {
  delete TransformStamped::default_instance_;
  delete TransformStamped_reflection_;
}

void protobuf_AddDesc_TransformStamped_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_TransformStamped_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gz_std_msgs::protobuf_AddDesc_Header_2eproto();
  ::gz_geometry_msgs::protobuf_AddDesc_Transform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026TransformStamped.proto\022\020gz_geometry_ms"
    "gs\032\014Header.proto\032\017Transform.proto\"g\n\020Tra"
    "nsformStamped\022#\n\006header\030\001 \002(\0132\023.gz_std_m"
    "sgs.Header\022.\n\ttransform\030\002 \002(\0132\033.gz_geome"
    "try_msgs.Transform", 178);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TransformStamped.proto", &protobuf_RegisterTypes);
  TransformStamped::default_instance_ = new TransformStamped();
  TransformStamped::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TransformStamped_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TransformStamped_2eproto {
  StaticDescriptorInitializer_TransformStamped_2eproto() {
    protobuf_AddDesc_TransformStamped_2eproto();
  }
} static_descriptor_initializer_TransformStamped_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformStamped::kHeaderFieldNumber;
const int TransformStamped::kTransformFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformStamped::TransformStamped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz_geometry_msgs.TransformStamped)
}

void TransformStamped::InitAsDefaultInstance() {
  header_ = const_cast< ::gz_std_msgs::Header*>(&::gz_std_msgs::Header::default_instance());
  transform_ = const_cast< ::gz_geometry_msgs::Transform*>(&::gz_geometry_msgs::Transform::default_instance());
}

TransformStamped::TransformStamped(const TransformStamped& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gz_geometry_msgs.TransformStamped)
}

void TransformStamped::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  transform_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformStamped::~TransformStamped() {
  // @@protoc_insertion_point(destructor:gz_geometry_msgs.TransformStamped)
  SharedDtor();
}

void TransformStamped::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete transform_;
  }
}

void TransformStamped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformStamped::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformStamped_descriptor_;
}

const TransformStamped& TransformStamped::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TransformStamped_2eproto();
  return *default_instance_;
}

TransformStamped* TransformStamped::default_instance_ = NULL;

TransformStamped* TransformStamped::New(::google::protobuf::Arena* arena) const {
  TransformStamped* n = new TransformStamped;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:gz_geometry_msgs.TransformStamped)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      if (header_ != NULL) header_->::gz_std_msgs::Header::Clear();
    }
    if (has_transform()) {
      if (transform_ != NULL) transform_->::gz_geometry_msgs::Transform::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransformStamped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz_geometry_msgs.TransformStamped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gz_std_msgs.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transform;
        break;
      }

      // required .gz_geometry_msgs.Transform transform = 2;
      case 2: {
        if (tag == 18) {
         parse_transform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz_geometry_msgs.TransformStamped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz_geometry_msgs.TransformStamped)
  return false;
#undef DO_
}

void TransformStamped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz_geometry_msgs.TransformStamped)
  // required .gz_std_msgs.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // required .gz_geometry_msgs.Transform transform = 2;
  if (has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->transform_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gz_geometry_msgs.TransformStamped)
}

::google::protobuf::uint8* TransformStamped::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gz_geometry_msgs.TransformStamped)
  // required .gz_std_msgs.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // required .gz_geometry_msgs.Transform transform = 2;
  if (has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->transform_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz_geometry_msgs.TransformStamped)
  return target;
}

int TransformStamped::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gz_geometry_msgs.TransformStamped)
  int total_size = 0;

  if (has_header()) {
    // required .gz_std_msgs.Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  if (has_transform()) {
    // required .gz_geometry_msgs.Transform transform = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transform_);
  }

  return total_size;
}
int TransformStamped::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gz_geometry_msgs.TransformStamped)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .gz_std_msgs.Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);

    // required .gz_geometry_msgs.Transform transform = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transform_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformStamped::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz_geometry_msgs.TransformStamped)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TransformStamped* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformStamped>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz_geometry_msgs.TransformStamped)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz_geometry_msgs.TransformStamped)
    MergeFrom(*source);
  }
}

void TransformStamped::MergeFrom(const TransformStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz_geometry_msgs.TransformStamped)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::gz_std_msgs::Header::MergeFrom(from.header());
    }
    if (from.has_transform()) {
      mutable_transform()->::gz_geometry_msgs::Transform::MergeFrom(from.transform());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransformStamped::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz_geometry_msgs.TransformStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformStamped::CopyFrom(const TransformStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz_geometry_msgs.TransformStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformStamped::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  if (has_transform()) {
    if (!this->transform_->IsInitialized()) return false;
  }
  return true;
}

void TransformStamped::Swap(TransformStamped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformStamped::InternalSwap(TransformStamped* other) {
  std::swap(header_, other->header_);
  std::swap(transform_, other->transform_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransformStamped::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformStamped_descriptor_;
  metadata.reflection = TransformStamped_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformStamped

// required .gz_std_msgs.Header header = 1;
bool TransformStamped::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransformStamped::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void TransformStamped::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransformStamped::clear_header() {
  if (header_ != NULL) header_->::gz_std_msgs::Header::Clear();
  clear_has_header();
}
const ::gz_std_msgs::Header& TransformStamped::header() const {
  // @@protoc_insertion_point(field_get:gz_geometry_msgs.TransformStamped.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::gz_std_msgs::Header* TransformStamped::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::gz_std_msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:gz_geometry_msgs.TransformStamped.header)
  return header_;
}
::gz_std_msgs::Header* TransformStamped::release_header() {
  // @@protoc_insertion_point(field_release:gz_geometry_msgs.TransformStamped.header)
  clear_has_header();
  ::gz_std_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void TransformStamped::set_allocated_header(::gz_std_msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_geometry_msgs.TransformStamped.header)
}

// required .gz_geometry_msgs.Transform transform = 2;
bool TransformStamped::has_transform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransformStamped::set_has_transform() {
  _has_bits_[0] |= 0x00000002u;
}
void TransformStamped::clear_has_transform() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransformStamped::clear_transform() {
  if (transform_ != NULL) transform_->::gz_geometry_msgs::Transform::Clear();
  clear_has_transform();
}
const ::gz_geometry_msgs::Transform& TransformStamped::transform() const {
  // @@protoc_insertion_point(field_get:gz_geometry_msgs.TransformStamped.transform)
  return transform_ != NULL ? *transform_ : *default_instance_->transform_;
}
::gz_geometry_msgs::Transform* TransformStamped::mutable_transform() {
  set_has_transform();
  if (transform_ == NULL) {
    transform_ = new ::gz_geometry_msgs::Transform;
  }
  // @@protoc_insertion_point(field_mutable:gz_geometry_msgs.TransformStamped.transform)
  return transform_;
}
::gz_geometry_msgs::Transform* TransformStamped::release_transform() {
  // @@protoc_insertion_point(field_release:gz_geometry_msgs.TransformStamped.transform)
  clear_has_transform();
  ::gz_geometry_msgs::Transform* temp = transform_;
  transform_ = NULL;
  return temp;
}
void TransformStamped::set_allocated_transform(::gz_geometry_msgs::Transform* transform) {
  delete transform_;
  transform_ = transform;
  if (transform) {
    set_has_transform();
  } else {
    clear_has_transform();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_geometry_msgs.TransformStamped.transform)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_geometry_msgs

// @@protoc_insertion_point(global_scope)
