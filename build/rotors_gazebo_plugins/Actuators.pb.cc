// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Actuators.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Actuators.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gz_sensor_msgs {

namespace {

const ::google::protobuf::Descriptor* Actuators_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Actuators_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Actuators_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Actuators_2eproto() {
  protobuf_AddDesc_Actuators_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Actuators.proto");
  GOOGLE_CHECK(file != NULL);
  Actuators_descriptor_ = file->message_type(0);
  static const int Actuators_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actuators, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actuators, angles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actuators, angular_velocities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actuators, normalized_),
  };
  Actuators_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Actuators_descriptor_,
      Actuators::default_instance_,
      Actuators_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actuators, _has_bits_[0]),
      -1,
      -1,
      sizeof(Actuators),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actuators, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Actuators_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Actuators_descriptor_, &Actuators::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Actuators_2eproto() {
  delete Actuators::default_instance_;
  delete Actuators_reflection_;
}

void protobuf_AddDesc_Actuators_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Actuators_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gz_std_msgs::protobuf_AddDesc_Header_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017Actuators.proto\022\016gz_sensor_msgs\032\014Heade"
    "r.proto\"|\n\tActuators\022#\n\006header\030\001 \002(\0132\023.g"
    "z_std_msgs.Header\022\022\n\006angles\030\002 \003(\001B\002\020\001\022\036\n"
    "\022angular_velocities\030\003 \003(\001B\002\020\001\022\026\n\nnormali"
    "zed\030\004 \003(\001B\002\020\001", 173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Actuators.proto", &protobuf_RegisterTypes);
  Actuators::default_instance_ = new Actuators();
  Actuators::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Actuators_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Actuators_2eproto {
  StaticDescriptorInitializer_Actuators_2eproto() {
    protobuf_AddDesc_Actuators_2eproto();
  }
} static_descriptor_initializer_Actuators_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Actuators::kHeaderFieldNumber;
const int Actuators::kAnglesFieldNumber;
const int Actuators::kAngularVelocitiesFieldNumber;
const int Actuators::kNormalizedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Actuators::Actuators()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz_sensor_msgs.Actuators)
}

void Actuators::InitAsDefaultInstance() {
  header_ = const_cast< ::gz_std_msgs::Header*>(&::gz_std_msgs::Header::default_instance());
}

Actuators::Actuators(const Actuators& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gz_sensor_msgs.Actuators)
}

void Actuators::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Actuators::~Actuators() {
  // @@protoc_insertion_point(destructor:gz_sensor_msgs.Actuators)
  SharedDtor();
}

void Actuators::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void Actuators::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Actuators::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Actuators_descriptor_;
}

const Actuators& Actuators::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Actuators_2eproto();
  return *default_instance_;
}

Actuators* Actuators::default_instance_ = NULL;

Actuators* Actuators::New(::google::protobuf::Arena* arena) const {
  Actuators* n = new Actuators;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Actuators::Clear() {
// @@protoc_insertion_point(message_clear_start:gz_sensor_msgs.Actuators)
  if (has_header()) {
    if (header_ != NULL) header_->::gz_std_msgs::Header::Clear();
  }
  angles_.Clear();
  angular_velocities_.Clear();
  normalized_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Actuators::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz_sensor_msgs.Actuators)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gz_std_msgs.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_angles;
        break;
      }

      // repeated double angles = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_angles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_angles())));
        } else if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_angles())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_angular_velocities;
        break;
      }

      // repeated double angular_velocities = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_angular_velocities:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_angular_velocities())));
        } else if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_angular_velocities())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_normalized;
        break;
      }

      // repeated double normalized = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_normalized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_normalized())));
        } else if (tag == 33) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_normalized())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz_sensor_msgs.Actuators)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz_sensor_msgs.Actuators)
  return false;
#undef DO_
}

void Actuators::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz_sensor_msgs.Actuators)
  // required .gz_std_msgs.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated double angles = 2 [packed = true];
  if (this->angles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_angles_cached_byte_size_);
  }
  for (int i = 0; i < this->angles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->angles(i), output);
  }

  // repeated double angular_velocities = 3 [packed = true];
  if (this->angular_velocities_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_angular_velocities_cached_byte_size_);
  }
  for (int i = 0; i < this->angular_velocities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->angular_velocities(i), output);
  }

  // repeated double normalized = 4 [packed = true];
  if (this->normalized_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_normalized_cached_byte_size_);
  }
  for (int i = 0; i < this->normalized_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->normalized(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gz_sensor_msgs.Actuators)
}

::google::protobuf::uint8* Actuators::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gz_sensor_msgs.Actuators)
  // required .gz_std_msgs.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated double angles = 2 [packed = true];
  if (this->angles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _angles_cached_byte_size_, target);
  }
  for (int i = 0; i < this->angles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->angles(i), target);
  }

  // repeated double angular_velocities = 3 [packed = true];
  if (this->angular_velocities_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _angular_velocities_cached_byte_size_, target);
  }
  for (int i = 0; i < this->angular_velocities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->angular_velocities(i), target);
  }

  // repeated double normalized = 4 [packed = true];
  if (this->normalized_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _normalized_cached_byte_size_, target);
  }
  for (int i = 0; i < this->normalized_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->normalized(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz_sensor_msgs.Actuators)
  return target;
}

int Actuators::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gz_sensor_msgs.Actuators)
  int total_size = 0;

  // required .gz_std_msgs.Header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }
  // repeated double angles = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->angles_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _angles_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double angular_velocities = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->angular_velocities_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _angular_velocities_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double normalized = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->normalized_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _normalized_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Actuators::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz_sensor_msgs.Actuators)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Actuators* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Actuators>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz_sensor_msgs.Actuators)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz_sensor_msgs.Actuators)
    MergeFrom(*source);
  }
}

void Actuators::MergeFrom(const Actuators& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz_sensor_msgs.Actuators)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  angles_.MergeFrom(from.angles_);
  angular_velocities_.MergeFrom(from.angular_velocities_);
  normalized_.MergeFrom(from.normalized_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::gz_std_msgs::Header::MergeFrom(from.header());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Actuators::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz_sensor_msgs.Actuators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Actuators::CopyFrom(const Actuators& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz_sensor_msgs.Actuators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Actuators::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  return true;
}

void Actuators::Swap(Actuators* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Actuators::InternalSwap(Actuators* other) {
  std::swap(header_, other->header_);
  angles_.UnsafeArenaSwap(&other->angles_);
  angular_velocities_.UnsafeArenaSwap(&other->angular_velocities_);
  normalized_.UnsafeArenaSwap(&other->normalized_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Actuators::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Actuators_descriptor_;
  metadata.reflection = Actuators_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Actuators

// required .gz_std_msgs.Header header = 1;
bool Actuators::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Actuators::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Actuators::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Actuators::clear_header() {
  if (header_ != NULL) header_->::gz_std_msgs::Header::Clear();
  clear_has_header();
}
const ::gz_std_msgs::Header& Actuators::header() const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.Actuators.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::gz_std_msgs::Header* Actuators::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::gz_std_msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:gz_sensor_msgs.Actuators.header)
  return header_;
}
::gz_std_msgs::Header* Actuators::release_header() {
  // @@protoc_insertion_point(field_release:gz_sensor_msgs.Actuators.header)
  clear_has_header();
  ::gz_std_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Actuators::set_allocated_header(::gz_std_msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_sensor_msgs.Actuators.header)
}

// repeated double angles = 2 [packed = true];
int Actuators::angles_size() const {
  return angles_.size();
}
void Actuators::clear_angles() {
  angles_.Clear();
}
 double Actuators::angles(int index) const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.Actuators.angles)
  return angles_.Get(index);
}
 void Actuators::set_angles(int index, double value) {
  angles_.Set(index, value);
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.Actuators.angles)
}
 void Actuators::add_angles(double value) {
  angles_.Add(value);
  // @@protoc_insertion_point(field_add:gz_sensor_msgs.Actuators.angles)
}
 const ::google::protobuf::RepeatedField< double >&
Actuators::angles() const {
  // @@protoc_insertion_point(field_list:gz_sensor_msgs.Actuators.angles)
  return angles_;
}
 ::google::protobuf::RepeatedField< double >*
Actuators::mutable_angles() {
  // @@protoc_insertion_point(field_mutable_list:gz_sensor_msgs.Actuators.angles)
  return &angles_;
}

// repeated double angular_velocities = 3 [packed = true];
int Actuators::angular_velocities_size() const {
  return angular_velocities_.size();
}
void Actuators::clear_angular_velocities() {
  angular_velocities_.Clear();
}
 double Actuators::angular_velocities(int index) const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.Actuators.angular_velocities)
  return angular_velocities_.Get(index);
}
 void Actuators::set_angular_velocities(int index, double value) {
  angular_velocities_.Set(index, value);
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.Actuators.angular_velocities)
}
 void Actuators::add_angular_velocities(double value) {
  angular_velocities_.Add(value);
  // @@protoc_insertion_point(field_add:gz_sensor_msgs.Actuators.angular_velocities)
}
 const ::google::protobuf::RepeatedField< double >&
Actuators::angular_velocities() const {
  // @@protoc_insertion_point(field_list:gz_sensor_msgs.Actuators.angular_velocities)
  return angular_velocities_;
}
 ::google::protobuf::RepeatedField< double >*
Actuators::mutable_angular_velocities() {
  // @@protoc_insertion_point(field_mutable_list:gz_sensor_msgs.Actuators.angular_velocities)
  return &angular_velocities_;
}

// repeated double normalized = 4 [packed = true];
int Actuators::normalized_size() const {
  return normalized_.size();
}
void Actuators::clear_normalized() {
  normalized_.Clear();
}
 double Actuators::normalized(int index) const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.Actuators.normalized)
  return normalized_.Get(index);
}
 void Actuators::set_normalized(int index, double value) {
  normalized_.Set(index, value);
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.Actuators.normalized)
}
 void Actuators::add_normalized(double value) {
  normalized_.Add(value);
  // @@protoc_insertion_point(field_add:gz_sensor_msgs.Actuators.normalized)
}
 const ::google::protobuf::RepeatedField< double >&
Actuators::normalized() const {
  // @@protoc_insertion_point(field_list:gz_sensor_msgs.Actuators.normalized)
  return normalized_;
}
 ::google::protobuf::RepeatedField< double >*
Actuators::mutable_normalized() {
  // @@protoc_insertion_point(field_mutable_list:gz_sensor_msgs.Actuators.normalized)
  return &normalized_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_sensor_msgs

// @@protoc_insertion_point(global_scope)
