// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Transform.proto

#ifndef PROTOBUF_Transform_2eproto__INCLUDED
#define PROTOBUF_Transform_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
#include "quaternion.pb.h"
// @@protoc_insertion_point(includes)

namespace gz_geometry_msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Transform_2eproto();
void protobuf_AssignDesc_Transform_2eproto();
void protobuf_ShutdownFile_Transform_2eproto();

class Transform;

// ===================================================================

class Transform : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz_geometry_msgs.Transform) */ {
 public:
  Transform();
  virtual ~Transform();

  Transform(const Transform& from);

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transform& default_instance();

  void Swap(Transform* other);

  // implements Message ----------------------------------------------

  inline Transform* New() const { return New(NULL); }

  Transform* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transform* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Vector3d translation = 1;
  bool has_translation() const;
  void clear_translation();
  static const int kTranslationFieldNumber = 1;
  const ::gazebo::msgs::Vector3d& translation() const;
  ::gazebo::msgs::Vector3d* mutable_translation();
  ::gazebo::msgs::Vector3d* release_translation();
  void set_allocated_translation(::gazebo::msgs::Vector3d* translation);

  // required .gazebo.msgs.Quaternion rotation = 2;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 2;
  const ::gazebo::msgs::Quaternion& rotation() const;
  ::gazebo::msgs::Quaternion* mutable_rotation();
  ::gazebo::msgs::Quaternion* release_rotation();
  void set_allocated_rotation(::gazebo::msgs::Quaternion* rotation);

  // @@protoc_insertion_point(class_scope:gz_geometry_msgs.Transform)
 private:
  inline void set_has_translation();
  inline void clear_has_translation();
  inline void set_has_rotation();
  inline void clear_has_rotation();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gazebo::msgs::Vector3d* translation_;
  ::gazebo::msgs::Quaternion* rotation_;
  friend void  protobuf_AddDesc_Transform_2eproto();
  friend void protobuf_AssignDesc_Transform_2eproto();
  friend void protobuf_ShutdownFile_Transform_2eproto();

  void InitAsDefaultInstance();
  static Transform* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Transform

// required .gazebo.msgs.Vector3d translation = 1;
inline bool Transform::has_translation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transform::set_has_translation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transform::clear_has_translation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transform::clear_translation() {
  if (translation_ != NULL) translation_->::gazebo::msgs::Vector3d::Clear();
  clear_has_translation();
}
inline const ::gazebo::msgs::Vector3d& Transform::translation() const {
  // @@protoc_insertion_point(field_get:gz_geometry_msgs.Transform.translation)
  return translation_ != NULL ? *translation_ : *default_instance_->translation_;
}
inline ::gazebo::msgs::Vector3d* Transform::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) {
    translation_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:gz_geometry_msgs.Transform.translation)
  return translation_;
}
inline ::gazebo::msgs::Vector3d* Transform::release_translation() {
  // @@protoc_insertion_point(field_release:gz_geometry_msgs.Transform.translation)
  clear_has_translation();
  ::gazebo::msgs::Vector3d* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline void Transform::set_allocated_translation(::gazebo::msgs::Vector3d* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_geometry_msgs.Transform.translation)
}

// required .gazebo.msgs.Quaternion rotation = 2;
inline bool Transform::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transform::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transform::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transform::clear_rotation() {
  if (rotation_ != NULL) rotation_->::gazebo::msgs::Quaternion::Clear();
  clear_has_rotation();
}
inline const ::gazebo::msgs::Quaternion& Transform::rotation() const {
  // @@protoc_insertion_point(field_get:gz_geometry_msgs.Transform.rotation)
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
inline ::gazebo::msgs::Quaternion* Transform::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::gazebo::msgs::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:gz_geometry_msgs.Transform.rotation)
  return rotation_;
}
inline ::gazebo::msgs::Quaternion* Transform::release_rotation() {
  // @@protoc_insertion_point(field_release:gz_geometry_msgs.Transform.rotation)
  clear_has_rotation();
  ::gazebo::msgs::Quaternion* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void Transform::set_allocated_rotation(::gazebo::msgs::Quaternion* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_geometry_msgs.Transform.rotation)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_geometry_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Transform_2eproto__INCLUDED
