// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TwistStamped.proto

#ifndef PROTOBUF_TwistStamped_2eproto__INCLUDED
#define PROTOBUF_TwistStamped_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Header.pb.h"
#include "Twist.pb.h"
// @@protoc_insertion_point(includes)

namespace gz_geometry_msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_TwistStamped_2eproto();
void protobuf_AssignDesc_TwistStamped_2eproto();
void protobuf_ShutdownFile_TwistStamped_2eproto();

class TwistStamped;

// ===================================================================

class TwistStamped : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz_geometry_msgs.TwistStamped) */ {
 public:
  TwistStamped();
  virtual ~TwistStamped();

  TwistStamped(const TwistStamped& from);

  inline TwistStamped& operator=(const TwistStamped& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TwistStamped& default_instance();

  void Swap(TwistStamped* other);

  // implements Message ----------------------------------------------

  inline TwistStamped* New() const { return New(NULL); }

  TwistStamped* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TwistStamped& from);
  void MergeFrom(const TwistStamped& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TwistStamped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gz_std_msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::gz_std_msgs::Header& header() const;
  ::gz_std_msgs::Header* mutable_header();
  ::gz_std_msgs::Header* release_header();
  void set_allocated_header(::gz_std_msgs::Header* header);

  // required .gz_geometry_msgs.Twist twist = 2;
  bool has_twist() const;
  void clear_twist();
  static const int kTwistFieldNumber = 2;
  const ::gz_geometry_msgs::Twist& twist() const;
  ::gz_geometry_msgs::Twist* mutable_twist();
  ::gz_geometry_msgs::Twist* release_twist();
  void set_allocated_twist(::gz_geometry_msgs::Twist* twist);

  // @@protoc_insertion_point(class_scope:gz_geometry_msgs.TwistStamped)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_twist();
  inline void clear_has_twist();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gz_std_msgs::Header* header_;
  ::gz_geometry_msgs::Twist* twist_;
  friend void  protobuf_AddDesc_TwistStamped_2eproto();
  friend void protobuf_AssignDesc_TwistStamped_2eproto();
  friend void protobuf_ShutdownFile_TwistStamped_2eproto();

  void InitAsDefaultInstance();
  static TwistStamped* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TwistStamped

// required .gz_std_msgs.Header header = 1;
inline bool TwistStamped::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TwistStamped::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TwistStamped::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TwistStamped::clear_header() {
  if (header_ != NULL) header_->::gz_std_msgs::Header::Clear();
  clear_has_header();
}
inline const ::gz_std_msgs::Header& TwistStamped::header() const {
  // @@protoc_insertion_point(field_get:gz_geometry_msgs.TwistStamped.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::gz_std_msgs::Header* TwistStamped::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::gz_std_msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:gz_geometry_msgs.TwistStamped.header)
  return header_;
}
inline ::gz_std_msgs::Header* TwistStamped::release_header() {
  // @@protoc_insertion_point(field_release:gz_geometry_msgs.TwistStamped.header)
  clear_has_header();
  ::gz_std_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void TwistStamped::set_allocated_header(::gz_std_msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_geometry_msgs.TwistStamped.header)
}

// required .gz_geometry_msgs.Twist twist = 2;
inline bool TwistStamped::has_twist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TwistStamped::set_has_twist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TwistStamped::clear_has_twist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TwistStamped::clear_twist() {
  if (twist_ != NULL) twist_->::gz_geometry_msgs::Twist::Clear();
  clear_has_twist();
}
inline const ::gz_geometry_msgs::Twist& TwistStamped::twist() const {
  // @@protoc_insertion_point(field_get:gz_geometry_msgs.TwistStamped.twist)
  return twist_ != NULL ? *twist_ : *default_instance_->twist_;
}
inline ::gz_geometry_msgs::Twist* TwistStamped::mutable_twist() {
  set_has_twist();
  if (twist_ == NULL) {
    twist_ = new ::gz_geometry_msgs::Twist;
  }
  // @@protoc_insertion_point(field_mutable:gz_geometry_msgs.TwistStamped.twist)
  return twist_;
}
inline ::gz_geometry_msgs::Twist* TwistStamped::release_twist() {
  // @@protoc_insertion_point(field_release:gz_geometry_msgs.TwistStamped.twist)
  clear_has_twist();
  ::gz_geometry_msgs::Twist* temp = twist_;
  twist_ = NULL;
  return temp;
}
inline void TwistStamped::set_allocated_twist(::gz_geometry_msgs::Twist* twist) {
  delete twist_;
  twist_ = twist;
  if (twist) {
    set_has_twist();
  } else {
    clear_has_twist();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_geometry_msgs.TwistStamped.twist)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_geometry_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TwistStamped_2eproto__INCLUDED
