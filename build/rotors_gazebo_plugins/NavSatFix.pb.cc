// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NavSatFix.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NavSatFix.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gz_sensor_msgs {

namespace {

const ::google::protobuf::Descriptor* NavSatFix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NavSatFix_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NavSatFix_Service_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NavSatFix_Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NavSatFix_PositionCovarianceType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_NavSatFix_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_NavSatFix_2eproto() {
  protobuf_AddDesc_NavSatFix_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NavSatFix.proto");
  GOOGLE_CHECK(file != NULL);
  NavSatFix_descriptor_ = file->message_type(0);
  static const int NavSatFix_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatFix, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatFix, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatFix, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatFix, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatFix, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatFix, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatFix, position_covariance_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatFix, position_covariance_),
  };
  NavSatFix_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NavSatFix_descriptor_,
      NavSatFix::default_instance_,
      NavSatFix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatFix, _has_bits_[0]),
      -1,
      -1,
      sizeof(NavSatFix),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatFix, _internal_metadata_),
      -1);
  NavSatFix_Service_descriptor_ = NavSatFix_descriptor_->enum_type(0);
  NavSatFix_Status_descriptor_ = NavSatFix_descriptor_->enum_type(1);
  NavSatFix_PositionCovarianceType_descriptor_ = NavSatFix_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NavSatFix_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NavSatFix_descriptor_, &NavSatFix::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NavSatFix_2eproto() {
  delete NavSatFix::default_instance_;
  delete NavSatFix_reflection_;
}

void protobuf_AddDesc_NavSatFix_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_NavSatFix_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gz_std_msgs::protobuf_AddDesc_Header_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017NavSatFix.proto\022\016gz_sensor_msgs\032\014Heade"
    "r.proto\"\215\005\n\tNavSatFix\022#\n\006header\030\001 \002(\0132\023."
    "gz_std_msgs.Header\0222\n\007service\030\002 \002(\0162!.gz"
    "_sensor_msgs.NavSatFix.Service\0220\n\006status"
    "\030\003 \002(\0162 .gz_sensor_msgs.NavSatFix.Status"
    "\022\020\n\010latitude\030\004 \002(\001\022\021\n\tlongitude\030\005 \002(\001\022\020\n"
    "\010altitude\030\006 \002(\001\022R\n\030position_covariance_t"
    "ype\030\007 \002(\01620.gz_sensor_msgs.NavSatFix.Pos"
    "itionCovarianceType\022\037\n\023position_covarian"
    "ce\030\010 \003(\002B\002\020\001\"Y\n\007Service\022\017\n\013SERVICE_GPS\020\000"
    "\022\023\n\017SERVICE_GLONASS\020\001\022\023\n\017SERVICE_COMPASS"
    "\020\002\022\023\n\017SERVICE_GALILEO\020\003\"U\n\006Status\022\021\n\rSTA"
    "TUS_NO_FIX\020\000\022\016\n\nSTATUS_FIX\020\001\022\023\n\017STATUS_S"
    "BAS_FIX\020\002\022\023\n\017STATUS_GBAS_FIX\020\003\"\226\001\n\026Posit"
    "ionCovarianceType\022\033\n\027COVARIANCE_TYPE_UNK"
    "NOWN\020\000\022 \n\034COVARIANCE_TYPE_APPROXIMATED\020\001"
    "\022\"\n\036COVARIANCE_TYPE_DIAGONAL_KNOWN\020\002\022\031\n\025"
    "COVARIANCE_TYPE_KNOWN\020\003", 703);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NavSatFix.proto", &protobuf_RegisterTypes);
  NavSatFix::default_instance_ = new NavSatFix();
  NavSatFix::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NavSatFix_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NavSatFix_2eproto {
  StaticDescriptorInitializer_NavSatFix_2eproto() {
    protobuf_AddDesc_NavSatFix_2eproto();
  }
} static_descriptor_initializer_NavSatFix_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* NavSatFix_Service_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NavSatFix_Service_descriptor_;
}
bool NavSatFix_Service_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NavSatFix_Service NavSatFix::SERVICE_GPS;
const NavSatFix_Service NavSatFix::SERVICE_GLONASS;
const NavSatFix_Service NavSatFix::SERVICE_COMPASS;
const NavSatFix_Service NavSatFix::SERVICE_GALILEO;
const NavSatFix_Service NavSatFix::Service_MIN;
const NavSatFix_Service NavSatFix::Service_MAX;
const int NavSatFix::Service_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NavSatFix_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NavSatFix_Status_descriptor_;
}
bool NavSatFix_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NavSatFix_Status NavSatFix::STATUS_NO_FIX;
const NavSatFix_Status NavSatFix::STATUS_FIX;
const NavSatFix_Status NavSatFix::STATUS_SBAS_FIX;
const NavSatFix_Status NavSatFix::STATUS_GBAS_FIX;
const NavSatFix_Status NavSatFix::Status_MIN;
const NavSatFix_Status NavSatFix::Status_MAX;
const int NavSatFix::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NavSatFix_PositionCovarianceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NavSatFix_PositionCovarianceType_descriptor_;
}
bool NavSatFix_PositionCovarianceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NavSatFix_PositionCovarianceType NavSatFix::COVARIANCE_TYPE_UNKNOWN;
const NavSatFix_PositionCovarianceType NavSatFix::COVARIANCE_TYPE_APPROXIMATED;
const NavSatFix_PositionCovarianceType NavSatFix::COVARIANCE_TYPE_DIAGONAL_KNOWN;
const NavSatFix_PositionCovarianceType NavSatFix::COVARIANCE_TYPE_KNOWN;
const NavSatFix_PositionCovarianceType NavSatFix::PositionCovarianceType_MIN;
const NavSatFix_PositionCovarianceType NavSatFix::PositionCovarianceType_MAX;
const int NavSatFix::PositionCovarianceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavSatFix::kHeaderFieldNumber;
const int NavSatFix::kServiceFieldNumber;
const int NavSatFix::kStatusFieldNumber;
const int NavSatFix::kLatitudeFieldNumber;
const int NavSatFix::kLongitudeFieldNumber;
const int NavSatFix::kAltitudeFieldNumber;
const int NavSatFix::kPositionCovarianceTypeFieldNumber;
const int NavSatFix::kPositionCovarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavSatFix::NavSatFix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz_sensor_msgs.NavSatFix)
}

void NavSatFix::InitAsDefaultInstance() {
  header_ = const_cast< ::gz_std_msgs::Header*>(&::gz_std_msgs::Header::default_instance());
}

NavSatFix::NavSatFix(const NavSatFix& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gz_sensor_msgs.NavSatFix)
}

void NavSatFix::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  service_ = 0;
  status_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  altitude_ = 0;
  position_covariance_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NavSatFix::~NavSatFix() {
  // @@protoc_insertion_point(destructor:gz_sensor_msgs.NavSatFix)
  SharedDtor();
}

void NavSatFix::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void NavSatFix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavSatFix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NavSatFix_descriptor_;
}

const NavSatFix& NavSatFix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NavSatFix_2eproto();
  return *default_instance_;
}

NavSatFix* NavSatFix::default_instance_ = NULL;

NavSatFix* NavSatFix::New(::google::protobuf::Arena* arena) const {
  NavSatFix* n = new NavSatFix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavSatFix::Clear() {
// @@protoc_insertion_point(message_clear_start:gz_sensor_msgs.NavSatFix)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NavSatFix, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NavSatFix*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(service_, altitude_);
    if (has_header()) {
      if (header_ != NULL) header_->::gz_std_msgs::Header::Clear();
    }
    position_covariance_type_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  position_covariance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NavSatFix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz_sensor_msgs.NavSatFix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gz_std_msgs.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_service;
        break;
      }

      // required .gz_sensor_msgs.NavSatFix.Service service = 2;
      case 2: {
        if (tag == 16) {
         parse_service:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gz_sensor_msgs::NavSatFix_Service_IsValid(value)) {
            set_service(static_cast< ::gz_sensor_msgs::NavSatFix_Service >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .gz_sensor_msgs.NavSatFix.Status status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gz_sensor_msgs::NavSatFix_Status_IsValid(value)) {
            set_status(static_cast< ::gz_sensor_msgs::NavSatFix_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_latitude;
        break;
      }

      // required double latitude = 4;
      case 4: {
        if (tag == 33) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_longitude;
        break;
      }

      // required double longitude = 5;
      case 5: {
        if (tag == 41) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_altitude;
        break;
      }

      // required double altitude = 6;
      case 6: {
        if (tag == 49) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_position_covariance_type;
        break;
      }

      // required .gz_sensor_msgs.NavSatFix.PositionCovarianceType position_covariance_type = 7;
      case 7: {
        if (tag == 56) {
         parse_position_covariance_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gz_sensor_msgs::NavSatFix_PositionCovarianceType_IsValid(value)) {
            set_position_covariance_type(static_cast< ::gz_sensor_msgs::NavSatFix_PositionCovarianceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_position_covariance;
        break;
      }

      // repeated float position_covariance = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_position_covariance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_position_covariance())));
        } else if (tag == 69) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 66, input, this->mutable_position_covariance())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz_sensor_msgs.NavSatFix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz_sensor_msgs.NavSatFix)
  return false;
#undef DO_
}

void NavSatFix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz_sensor_msgs.NavSatFix)
  // required .gz_std_msgs.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // required .gz_sensor_msgs.NavSatFix.Service service = 2;
  if (has_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->service(), output);
  }

  // required .gz_sensor_msgs.NavSatFix.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // required double latitude = 4;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }

  // required double longitude = 5;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->longitude(), output);
  }

  // required double altitude = 6;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->altitude(), output);
  }

  // required .gz_sensor_msgs.NavSatFix.PositionCovarianceType position_covariance_type = 7;
  if (has_position_covariance_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->position_covariance_type(), output);
  }

  // repeated float position_covariance = 8 [packed = true];
  if (this->position_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_position_covariance_cached_byte_size_);
  }
  for (int i = 0; i < this->position_covariance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->position_covariance(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gz_sensor_msgs.NavSatFix)
}

::google::protobuf::uint8* NavSatFix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gz_sensor_msgs.NavSatFix)
  // required .gz_std_msgs.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // required .gz_sensor_msgs.NavSatFix.Service service = 2;
  if (has_service()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->service(), target);
  }

  // required .gz_sensor_msgs.NavSatFix.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // required double latitude = 4;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude(), target);
  }

  // required double longitude = 5;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->longitude(), target);
  }

  // required double altitude = 6;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->altitude(), target);
  }

  // required .gz_sensor_msgs.NavSatFix.PositionCovarianceType position_covariance_type = 7;
  if (has_position_covariance_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->position_covariance_type(), target);
  }

  // repeated float position_covariance = 8 [packed = true];
  if (this->position_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _position_covariance_cached_byte_size_, target);
  }
  for (int i = 0; i < this->position_covariance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->position_covariance(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz_sensor_msgs.NavSatFix)
  return target;
}

int NavSatFix::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gz_sensor_msgs.NavSatFix)
  int total_size = 0;

  if (has_header()) {
    // required .gz_std_msgs.Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  if (has_service()) {
    // required .gz_sensor_msgs.NavSatFix.Service service = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->service());
  }

  if (has_status()) {
    // required .gz_sensor_msgs.NavSatFix.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  if (has_latitude()) {
    // required double latitude = 4;
    total_size += 1 + 8;
  }

  if (has_longitude()) {
    // required double longitude = 5;
    total_size += 1 + 8;
  }

  if (has_altitude()) {
    // required double altitude = 6;
    total_size += 1 + 8;
  }

  if (has_position_covariance_type()) {
    // required .gz_sensor_msgs.NavSatFix.PositionCovarianceType position_covariance_type = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position_covariance_type());
  }

  return total_size;
}
int NavSatFix::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gz_sensor_msgs.NavSatFix)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .gz_std_msgs.Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);

    // required .gz_sensor_msgs.NavSatFix.Service service = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->service());

    // required .gz_sensor_msgs.NavSatFix.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

    // required double latitude = 4;
    total_size += 1 + 8;

    // required double longitude = 5;
    total_size += 1 + 8;

    // required double altitude = 6;
    total_size += 1 + 8;

    // required .gz_sensor_msgs.NavSatFix.PositionCovarianceType position_covariance_type = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position_covariance_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated float position_covariance = 8 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->position_covariance_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_covariance_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavSatFix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz_sensor_msgs.NavSatFix)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NavSatFix* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NavSatFix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz_sensor_msgs.NavSatFix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz_sensor_msgs.NavSatFix)
    MergeFrom(*source);
  }
}

void NavSatFix::MergeFrom(const NavSatFix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz_sensor_msgs.NavSatFix)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  position_covariance_.MergeFrom(from.position_covariance_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::gz_std_msgs::Header::MergeFrom(from.header());
    }
    if (from.has_service()) {
      set_service(from.service());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_position_covariance_type()) {
      set_position_covariance_type(from.position_covariance_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NavSatFix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz_sensor_msgs.NavSatFix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavSatFix::CopyFrom(const NavSatFix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz_sensor_msgs.NavSatFix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavSatFix::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  return true;
}

void NavSatFix::Swap(NavSatFix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavSatFix::InternalSwap(NavSatFix* other) {
  std::swap(header_, other->header_);
  std::swap(service_, other->service_);
  std::swap(status_, other->status_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(altitude_, other->altitude_);
  std::swap(position_covariance_type_, other->position_covariance_type_);
  position_covariance_.UnsafeArenaSwap(&other->position_covariance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NavSatFix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NavSatFix_descriptor_;
  metadata.reflection = NavSatFix_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NavSatFix

// required .gz_std_msgs.Header header = 1;
bool NavSatFix::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NavSatFix::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void NavSatFix::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void NavSatFix::clear_header() {
  if (header_ != NULL) header_->::gz_std_msgs::Header::Clear();
  clear_has_header();
}
const ::gz_std_msgs::Header& NavSatFix::header() const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.NavSatFix.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::gz_std_msgs::Header* NavSatFix::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::gz_std_msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:gz_sensor_msgs.NavSatFix.header)
  return header_;
}
::gz_std_msgs::Header* NavSatFix::release_header() {
  // @@protoc_insertion_point(field_release:gz_sensor_msgs.NavSatFix.header)
  clear_has_header();
  ::gz_std_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void NavSatFix::set_allocated_header(::gz_std_msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_sensor_msgs.NavSatFix.header)
}

// required .gz_sensor_msgs.NavSatFix.Service service = 2;
bool NavSatFix::has_service() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NavSatFix::set_has_service() {
  _has_bits_[0] |= 0x00000002u;
}
void NavSatFix::clear_has_service() {
  _has_bits_[0] &= ~0x00000002u;
}
void NavSatFix::clear_service() {
  service_ = 0;
  clear_has_service();
}
 ::gz_sensor_msgs::NavSatFix_Service NavSatFix::service() const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.NavSatFix.service)
  return static_cast< ::gz_sensor_msgs::NavSatFix_Service >(service_);
}
 void NavSatFix::set_service(::gz_sensor_msgs::NavSatFix_Service value) {
  assert(::gz_sensor_msgs::NavSatFix_Service_IsValid(value));
  set_has_service();
  service_ = value;
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.NavSatFix.service)
}

// required .gz_sensor_msgs.NavSatFix.Status status = 3;
bool NavSatFix::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NavSatFix::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void NavSatFix::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void NavSatFix::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::gz_sensor_msgs::NavSatFix_Status NavSatFix::status() const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.NavSatFix.status)
  return static_cast< ::gz_sensor_msgs::NavSatFix_Status >(status_);
}
 void NavSatFix::set_status(::gz_sensor_msgs::NavSatFix_Status value) {
  assert(::gz_sensor_msgs::NavSatFix_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.NavSatFix.status)
}

// required double latitude = 4;
bool NavSatFix::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NavSatFix::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
void NavSatFix::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void NavSatFix::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
 double NavSatFix::latitude() const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.NavSatFix.latitude)
  return latitude_;
}
 void NavSatFix::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.NavSatFix.latitude)
}

// required double longitude = 5;
bool NavSatFix::has_longitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NavSatFix::set_has_longitude() {
  _has_bits_[0] |= 0x00000010u;
}
void NavSatFix::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void NavSatFix::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
 double NavSatFix::longitude() const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.NavSatFix.longitude)
  return longitude_;
}
 void NavSatFix::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.NavSatFix.longitude)
}

// required double altitude = 6;
bool NavSatFix::has_altitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NavSatFix::set_has_altitude() {
  _has_bits_[0] |= 0x00000020u;
}
void NavSatFix::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000020u;
}
void NavSatFix::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
 double NavSatFix::altitude() const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.NavSatFix.altitude)
  return altitude_;
}
 void NavSatFix::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.NavSatFix.altitude)
}

// required .gz_sensor_msgs.NavSatFix.PositionCovarianceType position_covariance_type = 7;
bool NavSatFix::has_position_covariance_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NavSatFix::set_has_position_covariance_type() {
  _has_bits_[0] |= 0x00000040u;
}
void NavSatFix::clear_has_position_covariance_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void NavSatFix::clear_position_covariance_type() {
  position_covariance_type_ = 0;
  clear_has_position_covariance_type();
}
 ::gz_sensor_msgs::NavSatFix_PositionCovarianceType NavSatFix::position_covariance_type() const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.NavSatFix.position_covariance_type)
  return static_cast< ::gz_sensor_msgs::NavSatFix_PositionCovarianceType >(position_covariance_type_);
}
 void NavSatFix::set_position_covariance_type(::gz_sensor_msgs::NavSatFix_PositionCovarianceType value) {
  assert(::gz_sensor_msgs::NavSatFix_PositionCovarianceType_IsValid(value));
  set_has_position_covariance_type();
  position_covariance_type_ = value;
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.NavSatFix.position_covariance_type)
}

// repeated float position_covariance = 8 [packed = true];
int NavSatFix::position_covariance_size() const {
  return position_covariance_.size();
}
void NavSatFix::clear_position_covariance() {
  position_covariance_.Clear();
}
 float NavSatFix::position_covariance(int index) const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.NavSatFix.position_covariance)
  return position_covariance_.Get(index);
}
 void NavSatFix::set_position_covariance(int index, float value) {
  position_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.NavSatFix.position_covariance)
}
 void NavSatFix::add_position_covariance(float value) {
  position_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:gz_sensor_msgs.NavSatFix.position_covariance)
}
 const ::google::protobuf::RepeatedField< float >&
NavSatFix::position_covariance() const {
  // @@protoc_insertion_point(field_list:gz_sensor_msgs.NavSatFix.position_covariance)
  return position_covariance_;
}
 ::google::protobuf::RepeatedField< float >*
NavSatFix::mutable_position_covariance() {
  // @@protoc_insertion_point(field_mutable_list:gz_sensor_msgs.NavSatFix.position_covariance)
  return &position_covariance_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_sensor_msgs

// @@protoc_insertion_point(global_scope)
