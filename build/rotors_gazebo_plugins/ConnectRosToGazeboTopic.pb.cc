// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConnectRosToGazeboTopic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConnectRosToGazeboTopic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gz_std_msgs {

namespace {

const ::google::protobuf::Descriptor* ConnectRosToGazeboTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectRosToGazeboTopic_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ConnectRosToGazeboTopic_MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConnectRosToGazeboTopic_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ConnectRosToGazeboTopic_2eproto() {
  protobuf_AddDesc_ConnectRosToGazeboTopic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConnectRosToGazeboTopic.proto");
  GOOGLE_CHECK(file != NULL);
  ConnectRosToGazeboTopic_descriptor_ = file->message_type(0);
  static const int ConnectRosToGazeboTopic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRosToGazeboTopic, ros_topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRosToGazeboTopic, gazebo_topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRosToGazeboTopic, msgtype_),
  };
  ConnectRosToGazeboTopic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectRosToGazeboTopic_descriptor_,
      ConnectRosToGazeboTopic::default_instance_,
      ConnectRosToGazeboTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRosToGazeboTopic, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConnectRosToGazeboTopic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRosToGazeboTopic, _internal_metadata_),
      -1);
  ConnectRosToGazeboTopic_MsgType_descriptor_ = ConnectRosToGazeboTopic_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConnectRosToGazeboTopic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectRosToGazeboTopic_descriptor_, &ConnectRosToGazeboTopic::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConnectRosToGazeboTopic_2eproto() {
  delete ConnectRosToGazeboTopic::default_instance_;
  delete ConnectRosToGazeboTopic_reflection_;
}

void protobuf_AddDesc_ConnectRosToGazeboTopic_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ConnectRosToGazeboTopic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035ConnectRosToGazeboTopic.proto\022\013gz_std_"
    "msgs\"\343\001\n\027ConnectRosToGazeboTopic\022\021\n\tros_"
    "topic\030\001 \002(\t\022\024\n\014gazebo_topic\030\003 \002(\t\022=\n\007msg"
    "Type\030\004 \002(\0162,.gz_std_msgs.ConnectRosToGaz"
    "eboTopic.MsgType\"`\n\007MsgType\022\r\n\tACTUATORS"
    "\020\000\022\027\n\023COMMAND_MOTOR_SPEED\020\001\022\035\n\031ROLL_PITC"
    "H_YAWRATE_THRUST\020\002\022\016\n\nWIND_SPEED\020\003", 274);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConnectRosToGazeboTopic.proto", &protobuf_RegisterTypes);
  ConnectRosToGazeboTopic::default_instance_ = new ConnectRosToGazeboTopic();
  ConnectRosToGazeboTopic::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConnectRosToGazeboTopic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConnectRosToGazeboTopic_2eproto {
  StaticDescriptorInitializer_ConnectRosToGazeboTopic_2eproto() {
    protobuf_AddDesc_ConnectRosToGazeboTopic_2eproto();
  }
} static_descriptor_initializer_ConnectRosToGazeboTopic_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ConnectRosToGazeboTopic_MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectRosToGazeboTopic_MsgType_descriptor_;
}
bool ConnectRosToGazeboTopic_MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConnectRosToGazeboTopic_MsgType ConnectRosToGazeboTopic::ACTUATORS;
const ConnectRosToGazeboTopic_MsgType ConnectRosToGazeboTopic::COMMAND_MOTOR_SPEED;
const ConnectRosToGazeboTopic_MsgType ConnectRosToGazeboTopic::ROLL_PITCH_YAWRATE_THRUST;
const ConnectRosToGazeboTopic_MsgType ConnectRosToGazeboTopic::WIND_SPEED;
const ConnectRosToGazeboTopic_MsgType ConnectRosToGazeboTopic::MsgType_MIN;
const ConnectRosToGazeboTopic_MsgType ConnectRosToGazeboTopic::MsgType_MAX;
const int ConnectRosToGazeboTopic::MsgType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectRosToGazeboTopic::kRosTopicFieldNumber;
const int ConnectRosToGazeboTopic::kGazeboTopicFieldNumber;
const int ConnectRosToGazeboTopic::kMsgTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectRosToGazeboTopic::ConnectRosToGazeboTopic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz_std_msgs.ConnectRosToGazeboTopic)
}

void ConnectRosToGazeboTopic::InitAsDefaultInstance() {
}

ConnectRosToGazeboTopic::ConnectRosToGazeboTopic(const ConnectRosToGazeboTopic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gz_std_msgs.ConnectRosToGazeboTopic)
}

void ConnectRosToGazeboTopic::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ros_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gazebo_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectRosToGazeboTopic::~ConnectRosToGazeboTopic() {
  // @@protoc_insertion_point(destructor:gz_std_msgs.ConnectRosToGazeboTopic)
  SharedDtor();
}

void ConnectRosToGazeboTopic::SharedDtor() {
  ros_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gazebo_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConnectRosToGazeboTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectRosToGazeboTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectRosToGazeboTopic_descriptor_;
}

const ConnectRosToGazeboTopic& ConnectRosToGazeboTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConnectRosToGazeboTopic_2eproto();
  return *default_instance_;
}

ConnectRosToGazeboTopic* ConnectRosToGazeboTopic::default_instance_ = NULL;

ConnectRosToGazeboTopic* ConnectRosToGazeboTopic::New(::google::protobuf::Arena* arena) const {
  ConnectRosToGazeboTopic* n = new ConnectRosToGazeboTopic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectRosToGazeboTopic::Clear() {
// @@protoc_insertion_point(message_clear_start:gz_std_msgs.ConnectRosToGazeboTopic)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_ros_topic()) {
      ros_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_gazebo_topic()) {
      gazebo_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    msgtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConnectRosToGazeboTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz_std_msgs.ConnectRosToGazeboTopic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ros_topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ros_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ros_topic().data(), this->ros_topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gz_std_msgs.ConnectRosToGazeboTopic.ros_topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gazebo_topic;
        break;
      }

      // required string gazebo_topic = 3;
      case 3: {
        if (tag == 26) {
         parse_gazebo_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gazebo_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gazebo_topic().data(), this->gazebo_topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gz_std_msgs.ConnectRosToGazeboTopic.gazebo_topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msgType;
        break;
      }

      // required .gz_std_msgs.ConnectRosToGazeboTopic.MsgType msgType = 4;
      case 4: {
        if (tag == 32) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gz_std_msgs::ConnectRosToGazeboTopic_MsgType_IsValid(value)) {
            set_msgtype(static_cast< ::gz_std_msgs::ConnectRosToGazeboTopic_MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz_std_msgs.ConnectRosToGazeboTopic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz_std_msgs.ConnectRosToGazeboTopic)
  return false;
#undef DO_
}

void ConnectRosToGazeboTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz_std_msgs.ConnectRosToGazeboTopic)
  // required string ros_topic = 1;
  if (has_ros_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ros_topic().data(), this->ros_topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gz_std_msgs.ConnectRosToGazeboTopic.ros_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ros_topic(), output);
  }

  // required string gazebo_topic = 3;
  if (has_gazebo_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gazebo_topic().data(), this->gazebo_topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gz_std_msgs.ConnectRosToGazeboTopic.gazebo_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gazebo_topic(), output);
  }

  // required .gz_std_msgs.ConnectRosToGazeboTopic.MsgType msgType = 4;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->msgtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gz_std_msgs.ConnectRosToGazeboTopic)
}

::google::protobuf::uint8* ConnectRosToGazeboTopic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gz_std_msgs.ConnectRosToGazeboTopic)
  // required string ros_topic = 1;
  if (has_ros_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ros_topic().data(), this->ros_topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gz_std_msgs.ConnectRosToGazeboTopic.ros_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ros_topic(), target);
  }

  // required string gazebo_topic = 3;
  if (has_gazebo_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gazebo_topic().data(), this->gazebo_topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gz_std_msgs.ConnectRosToGazeboTopic.gazebo_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gazebo_topic(), target);
  }

  // required .gz_std_msgs.ConnectRosToGazeboTopic.MsgType msgType = 4;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->msgtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz_std_msgs.ConnectRosToGazeboTopic)
  return target;
}

int ConnectRosToGazeboTopic::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gz_std_msgs.ConnectRosToGazeboTopic)
  int total_size = 0;

  if (has_ros_topic()) {
    // required string ros_topic = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ros_topic());
  }

  if (has_gazebo_topic()) {
    // required string gazebo_topic = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gazebo_topic());
  }

  if (has_msgtype()) {
    // required .gz_std_msgs.ConnectRosToGazeboTopic.MsgType msgType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  return total_size;
}
int ConnectRosToGazeboTopic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gz_std_msgs.ConnectRosToGazeboTopic)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string ros_topic = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ros_topic());

    // required string gazebo_topic = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gazebo_topic());

    // required .gz_std_msgs.ConnectRosToGazeboTopic.MsgType msgType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectRosToGazeboTopic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz_std_msgs.ConnectRosToGazeboTopic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConnectRosToGazeboTopic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectRosToGazeboTopic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz_std_msgs.ConnectRosToGazeboTopic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz_std_msgs.ConnectRosToGazeboTopic)
    MergeFrom(*source);
  }
}

void ConnectRosToGazeboTopic::MergeFrom(const ConnectRosToGazeboTopic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz_std_msgs.ConnectRosToGazeboTopic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ros_topic()) {
      set_has_ros_topic();
      ros_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ros_topic_);
    }
    if (from.has_gazebo_topic()) {
      set_has_gazebo_topic();
      gazebo_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gazebo_topic_);
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConnectRosToGazeboTopic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz_std_msgs.ConnectRosToGazeboTopic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRosToGazeboTopic::CopyFrom(const ConnectRosToGazeboTopic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz_std_msgs.ConnectRosToGazeboTopic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRosToGazeboTopic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ConnectRosToGazeboTopic::Swap(ConnectRosToGazeboTopic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectRosToGazeboTopic::InternalSwap(ConnectRosToGazeboTopic* other) {
  ros_topic_.Swap(&other->ros_topic_);
  gazebo_topic_.Swap(&other->gazebo_topic_);
  std::swap(msgtype_, other->msgtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectRosToGazeboTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectRosToGazeboTopic_descriptor_;
  metadata.reflection = ConnectRosToGazeboTopic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectRosToGazeboTopic

// required string ros_topic = 1;
bool ConnectRosToGazeboTopic::has_ros_topic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConnectRosToGazeboTopic::set_has_ros_topic() {
  _has_bits_[0] |= 0x00000001u;
}
void ConnectRosToGazeboTopic::clear_has_ros_topic() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConnectRosToGazeboTopic::clear_ros_topic() {
  ros_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ros_topic();
}
 const ::std::string& ConnectRosToGazeboTopic::ros_topic() const {
  // @@protoc_insertion_point(field_get:gz_std_msgs.ConnectRosToGazeboTopic.ros_topic)
  return ros_topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectRosToGazeboTopic::set_ros_topic(const ::std::string& value) {
  set_has_ros_topic();
  ros_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz_std_msgs.ConnectRosToGazeboTopic.ros_topic)
}
 void ConnectRosToGazeboTopic::set_ros_topic(const char* value) {
  set_has_ros_topic();
  ros_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz_std_msgs.ConnectRosToGazeboTopic.ros_topic)
}
 void ConnectRosToGazeboTopic::set_ros_topic(const char* value, size_t size) {
  set_has_ros_topic();
  ros_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz_std_msgs.ConnectRosToGazeboTopic.ros_topic)
}
 ::std::string* ConnectRosToGazeboTopic::mutable_ros_topic() {
  set_has_ros_topic();
  // @@protoc_insertion_point(field_mutable:gz_std_msgs.ConnectRosToGazeboTopic.ros_topic)
  return ros_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectRosToGazeboTopic::release_ros_topic() {
  // @@protoc_insertion_point(field_release:gz_std_msgs.ConnectRosToGazeboTopic.ros_topic)
  clear_has_ros_topic();
  return ros_topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectRosToGazeboTopic::set_allocated_ros_topic(::std::string* ros_topic) {
  if (ros_topic != NULL) {
    set_has_ros_topic();
  } else {
    clear_has_ros_topic();
  }
  ros_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ros_topic);
  // @@protoc_insertion_point(field_set_allocated:gz_std_msgs.ConnectRosToGazeboTopic.ros_topic)
}

// required string gazebo_topic = 3;
bool ConnectRosToGazeboTopic::has_gazebo_topic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConnectRosToGazeboTopic::set_has_gazebo_topic() {
  _has_bits_[0] |= 0x00000002u;
}
void ConnectRosToGazeboTopic::clear_has_gazebo_topic() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConnectRosToGazeboTopic::clear_gazebo_topic() {
  gazebo_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gazebo_topic();
}
 const ::std::string& ConnectRosToGazeboTopic::gazebo_topic() const {
  // @@protoc_insertion_point(field_get:gz_std_msgs.ConnectRosToGazeboTopic.gazebo_topic)
  return gazebo_topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectRosToGazeboTopic::set_gazebo_topic(const ::std::string& value) {
  set_has_gazebo_topic();
  gazebo_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz_std_msgs.ConnectRosToGazeboTopic.gazebo_topic)
}
 void ConnectRosToGazeboTopic::set_gazebo_topic(const char* value) {
  set_has_gazebo_topic();
  gazebo_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz_std_msgs.ConnectRosToGazeboTopic.gazebo_topic)
}
 void ConnectRosToGazeboTopic::set_gazebo_topic(const char* value, size_t size) {
  set_has_gazebo_topic();
  gazebo_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz_std_msgs.ConnectRosToGazeboTopic.gazebo_topic)
}
 ::std::string* ConnectRosToGazeboTopic::mutable_gazebo_topic() {
  set_has_gazebo_topic();
  // @@protoc_insertion_point(field_mutable:gz_std_msgs.ConnectRosToGazeboTopic.gazebo_topic)
  return gazebo_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectRosToGazeboTopic::release_gazebo_topic() {
  // @@protoc_insertion_point(field_release:gz_std_msgs.ConnectRosToGazeboTopic.gazebo_topic)
  clear_has_gazebo_topic();
  return gazebo_topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectRosToGazeboTopic::set_allocated_gazebo_topic(::std::string* gazebo_topic) {
  if (gazebo_topic != NULL) {
    set_has_gazebo_topic();
  } else {
    clear_has_gazebo_topic();
  }
  gazebo_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gazebo_topic);
  // @@protoc_insertion_point(field_set_allocated:gz_std_msgs.ConnectRosToGazeboTopic.gazebo_topic)
}

// required .gz_std_msgs.ConnectRosToGazeboTopic.MsgType msgType = 4;
bool ConnectRosToGazeboTopic::has_msgtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConnectRosToGazeboTopic::set_has_msgtype() {
  _has_bits_[0] |= 0x00000004u;
}
void ConnectRosToGazeboTopic::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConnectRosToGazeboTopic::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
 ::gz_std_msgs::ConnectRosToGazeboTopic_MsgType ConnectRosToGazeboTopic::msgtype() const {
  // @@protoc_insertion_point(field_get:gz_std_msgs.ConnectRosToGazeboTopic.msgType)
  return static_cast< ::gz_std_msgs::ConnectRosToGazeboTopic_MsgType >(msgtype_);
}
 void ConnectRosToGazeboTopic::set_msgtype(::gz_std_msgs::ConnectRosToGazeboTopic_MsgType value) {
  assert(::gz_std_msgs::ConnectRosToGazeboTopic_MsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:gz_std_msgs.ConnectRosToGazeboTopic.msgType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_std_msgs

// @@protoc_insertion_point(global_scope)
