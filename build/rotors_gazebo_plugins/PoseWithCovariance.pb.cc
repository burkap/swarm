// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PoseWithCovariance.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PoseWithCovariance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gz_geometry_msgs {

namespace {

const ::google::protobuf::Descriptor* PoseWithCovariance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoseWithCovariance_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PoseWithCovariance_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_PoseWithCovariance_2eproto() {
  protobuf_AddDesc_PoseWithCovariance_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PoseWithCovariance.proto");
  GOOGLE_CHECK(file != NULL);
  PoseWithCovariance_descriptor_ = file->message_type(0);
  static const int PoseWithCovariance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseWithCovariance, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseWithCovariance, covariance_),
  };
  PoseWithCovariance_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PoseWithCovariance_descriptor_,
      PoseWithCovariance::default_instance_,
      PoseWithCovariance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseWithCovariance, _has_bits_[0]),
      -1,
      -1,
      sizeof(PoseWithCovariance),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseWithCovariance, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PoseWithCovariance_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PoseWithCovariance_descriptor_, &PoseWithCovariance::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PoseWithCovariance_2eproto() {
  delete PoseWithCovariance::default_instance_;
  delete PoseWithCovariance_reflection_;
}

void protobuf_AddDesc_PoseWithCovariance_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_PoseWithCovariance_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_pose_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030PoseWithCovariance.proto\022\020gz_geometry_"
    "msgs\032\npose.proto\"M\n\022PoseWithCovariance\022\037"
    "\n\004pose\030\001 \002(\0132\021.gazebo.msgs.Pose\022\026\n\ncovar"
    "iance\030\002 \003(\001B\002\020\001", 135);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PoseWithCovariance.proto", &protobuf_RegisterTypes);
  PoseWithCovariance::default_instance_ = new PoseWithCovariance();
  PoseWithCovariance::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PoseWithCovariance_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PoseWithCovariance_2eproto {
  StaticDescriptorInitializer_PoseWithCovariance_2eproto() {
    protobuf_AddDesc_PoseWithCovariance_2eproto();
  }
} static_descriptor_initializer_PoseWithCovariance_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseWithCovariance::kPoseFieldNumber;
const int PoseWithCovariance::kCovarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseWithCovariance::PoseWithCovariance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz_geometry_msgs.PoseWithCovariance)
}

void PoseWithCovariance::InitAsDefaultInstance() {
  pose_ = const_cast< ::gazebo::msgs::Pose*>(&::gazebo::msgs::Pose::default_instance());
}

PoseWithCovariance::PoseWithCovariance(const PoseWithCovariance& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gz_geometry_msgs.PoseWithCovariance)
}

void PoseWithCovariance::SharedCtor() {
  _cached_size_ = 0;
  pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PoseWithCovariance::~PoseWithCovariance() {
  // @@protoc_insertion_point(destructor:gz_geometry_msgs.PoseWithCovariance)
  SharedDtor();
}

void PoseWithCovariance::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void PoseWithCovariance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoseWithCovariance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoseWithCovariance_descriptor_;
}

const PoseWithCovariance& PoseWithCovariance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PoseWithCovariance_2eproto();
  return *default_instance_;
}

PoseWithCovariance* PoseWithCovariance::default_instance_ = NULL;

PoseWithCovariance* PoseWithCovariance::New(::google::protobuf::Arena* arena) const {
  PoseWithCovariance* n = new PoseWithCovariance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoseWithCovariance::Clear() {
// @@protoc_insertion_point(message_clear_start:gz_geometry_msgs.PoseWithCovariance)
  if (has_pose()) {
    if (pose_ != NULL) pose_->::gazebo::msgs::Pose::Clear();
  }
  covariance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PoseWithCovariance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz_geometry_msgs.PoseWithCovariance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Pose pose = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_covariance;
        break;
      }

      // repeated double covariance = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_covariance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_covariance())));
        } else if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_covariance())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz_geometry_msgs.PoseWithCovariance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz_geometry_msgs.PoseWithCovariance)
  return false;
#undef DO_
}

void PoseWithCovariance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz_geometry_msgs.PoseWithCovariance)
  // required .gazebo.msgs.Pose pose = 1;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pose_, output);
  }

  // repeated double covariance = 2 [packed = true];
  if (this->covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_covariance_cached_byte_size_);
  }
  for (int i = 0; i < this->covariance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->covariance(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gz_geometry_msgs.PoseWithCovariance)
}

::google::protobuf::uint8* PoseWithCovariance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gz_geometry_msgs.PoseWithCovariance)
  // required .gazebo.msgs.Pose pose = 1;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pose_, false, target);
  }

  // repeated double covariance = 2 [packed = true];
  if (this->covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _covariance_cached_byte_size_, target);
  }
  for (int i = 0; i < this->covariance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->covariance(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz_geometry_msgs.PoseWithCovariance)
  return target;
}

int PoseWithCovariance::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gz_geometry_msgs.PoseWithCovariance)
  int total_size = 0;

  // required .gazebo.msgs.Pose pose = 1;
  if (has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }
  // repeated double covariance = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->covariance_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _covariance_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoseWithCovariance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz_geometry_msgs.PoseWithCovariance)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PoseWithCovariance* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PoseWithCovariance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz_geometry_msgs.PoseWithCovariance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz_geometry_msgs.PoseWithCovariance)
    MergeFrom(*source);
  }
}

void PoseWithCovariance::MergeFrom(const PoseWithCovariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz_geometry_msgs.PoseWithCovariance)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  covariance_.MergeFrom(from.covariance_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pose()) {
      mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from.pose());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PoseWithCovariance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz_geometry_msgs.PoseWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseWithCovariance::CopyFrom(const PoseWithCovariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz_geometry_msgs.PoseWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseWithCovariance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  return true;
}

void PoseWithCovariance::Swap(PoseWithCovariance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseWithCovariance::InternalSwap(PoseWithCovariance* other) {
  std::swap(pose_, other->pose_);
  covariance_.UnsafeArenaSwap(&other->covariance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoseWithCovariance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoseWithCovariance_descriptor_;
  metadata.reflection = PoseWithCovariance_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoseWithCovariance

// required .gazebo.msgs.Pose pose = 1;
bool PoseWithCovariance::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PoseWithCovariance::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
void PoseWithCovariance::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
void PoseWithCovariance::clear_pose() {
  if (pose_ != NULL) pose_->::gazebo::msgs::Pose::Clear();
  clear_has_pose();
}
const ::gazebo::msgs::Pose& PoseWithCovariance::pose() const {
  // @@protoc_insertion_point(field_get:gz_geometry_msgs.PoseWithCovariance.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
::gazebo::msgs::Pose* PoseWithCovariance::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::gazebo::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:gz_geometry_msgs.PoseWithCovariance.pose)
  return pose_;
}
::gazebo::msgs::Pose* PoseWithCovariance::release_pose() {
  // @@protoc_insertion_point(field_release:gz_geometry_msgs.PoseWithCovariance.pose)
  clear_has_pose();
  ::gazebo::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void PoseWithCovariance::set_allocated_pose(::gazebo::msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_geometry_msgs.PoseWithCovariance.pose)
}

// repeated double covariance = 2 [packed = true];
int PoseWithCovariance::covariance_size() const {
  return covariance_.size();
}
void PoseWithCovariance::clear_covariance() {
  covariance_.Clear();
}
 double PoseWithCovariance::covariance(int index) const {
  // @@protoc_insertion_point(field_get:gz_geometry_msgs.PoseWithCovariance.covariance)
  return covariance_.Get(index);
}
 void PoseWithCovariance::set_covariance(int index, double value) {
  covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:gz_geometry_msgs.PoseWithCovariance.covariance)
}
 void PoseWithCovariance::add_covariance(double value) {
  covariance_.Add(value);
  // @@protoc_insertion_point(field_add:gz_geometry_msgs.PoseWithCovariance.covariance)
}
 const ::google::protobuf::RepeatedField< double >&
PoseWithCovariance::covariance() const {
  // @@protoc_insertion_point(field_list:gz_geometry_msgs.PoseWithCovariance.covariance)
  return covariance_;
}
 ::google::protobuf::RepeatedField< double >*
PoseWithCovariance::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:gz_geometry_msgs.PoseWithCovariance.covariance)
  return &covariance_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_geometry_msgs

// @@protoc_insertion_point(global_scope)
