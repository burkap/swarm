// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FluidPressure.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FluidPressure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gz_sensor_msgs {

namespace {

const ::google::protobuf::Descriptor* FluidPressure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FluidPressure_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FluidPressure_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_FluidPressure_2eproto() {
  protobuf_AddDesc_FluidPressure_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FluidPressure.proto");
  GOOGLE_CHECK(file != NULL);
  FluidPressure_descriptor_ = file->message_type(0);
  static const int FluidPressure_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluidPressure, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluidPressure, fluid_pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluidPressure, variance_),
  };
  FluidPressure_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FluidPressure_descriptor_,
      FluidPressure::default_instance_,
      FluidPressure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluidPressure, _has_bits_[0]),
      -1,
      -1,
      sizeof(FluidPressure),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluidPressure, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FluidPressure_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FluidPressure_descriptor_, &FluidPressure::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FluidPressure_2eproto() {
  delete FluidPressure::default_instance_;
  delete FluidPressure_reflection_;
}

void protobuf_AddDesc_FluidPressure_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_FluidPressure_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gz_std_msgs::protobuf_AddDesc_Header_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023FluidPressure.proto\022\016gz_sensor_msgs\032\014H"
    "eader.proto\"^\n\rFluidPressure\022#\n\006header\030\001"
    " \002(\0132\023.gz_std_msgs.Header\022\026\n\016fluid_press"
    "ure\030\002 \002(\001\022\020\n\010variance\030\003 \002(\001", 147);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FluidPressure.proto", &protobuf_RegisterTypes);
  FluidPressure::default_instance_ = new FluidPressure();
  FluidPressure::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FluidPressure_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FluidPressure_2eproto {
  StaticDescriptorInitializer_FluidPressure_2eproto() {
    protobuf_AddDesc_FluidPressure_2eproto();
  }
} static_descriptor_initializer_FluidPressure_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FluidPressure::kHeaderFieldNumber;
const int FluidPressure::kFluidPressureFieldNumber;
const int FluidPressure::kVarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FluidPressure::FluidPressure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz_sensor_msgs.FluidPressure)
}

void FluidPressure::InitAsDefaultInstance() {
  header_ = const_cast< ::gz_std_msgs::Header*>(&::gz_std_msgs::Header::default_instance());
}

FluidPressure::FluidPressure(const FluidPressure& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gz_sensor_msgs.FluidPressure)
}

void FluidPressure::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  fluid_pressure_ = 0;
  variance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FluidPressure::~FluidPressure() {
  // @@protoc_insertion_point(destructor:gz_sensor_msgs.FluidPressure)
  SharedDtor();
}

void FluidPressure::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void FluidPressure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FluidPressure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FluidPressure_descriptor_;
}

const FluidPressure& FluidPressure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FluidPressure_2eproto();
  return *default_instance_;
}

FluidPressure* FluidPressure::default_instance_ = NULL;

FluidPressure* FluidPressure::New(::google::protobuf::Arena* arena) const {
  FluidPressure* n = new FluidPressure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FluidPressure::Clear() {
// @@protoc_insertion_point(message_clear_start:gz_sensor_msgs.FluidPressure)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FluidPressure, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FluidPressure*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(fluid_pressure_, variance_);
    if (has_header()) {
      if (header_ != NULL) header_->::gz_std_msgs::Header::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FluidPressure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz_sensor_msgs.FluidPressure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gz_std_msgs.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_fluid_pressure;
        break;
      }

      // required double fluid_pressure = 2;
      case 2: {
        if (tag == 17) {
         parse_fluid_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fluid_pressure_)));
          set_has_fluid_pressure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_variance;
        break;
      }

      // required double variance = 3;
      case 3: {
        if (tag == 25) {
         parse_variance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &variance_)));
          set_has_variance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz_sensor_msgs.FluidPressure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz_sensor_msgs.FluidPressure)
  return false;
#undef DO_
}

void FluidPressure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz_sensor_msgs.FluidPressure)
  // required .gz_std_msgs.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // required double fluid_pressure = 2;
  if (has_fluid_pressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->fluid_pressure(), output);
  }

  // required double variance = 3;
  if (has_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->variance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gz_sensor_msgs.FluidPressure)
}

::google::protobuf::uint8* FluidPressure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gz_sensor_msgs.FluidPressure)
  // required .gz_std_msgs.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // required double fluid_pressure = 2;
  if (has_fluid_pressure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->fluid_pressure(), target);
  }

  // required double variance = 3;
  if (has_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->variance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz_sensor_msgs.FluidPressure)
  return target;
}

int FluidPressure::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gz_sensor_msgs.FluidPressure)
  int total_size = 0;

  if (has_header()) {
    // required .gz_std_msgs.Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  if (has_fluid_pressure()) {
    // required double fluid_pressure = 2;
    total_size += 1 + 8;
  }

  if (has_variance()) {
    // required double variance = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
int FluidPressure::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gz_sensor_msgs.FluidPressure)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .gz_std_msgs.Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);

    // required double fluid_pressure = 2;
    total_size += 1 + 8;

    // required double variance = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FluidPressure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz_sensor_msgs.FluidPressure)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FluidPressure* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FluidPressure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz_sensor_msgs.FluidPressure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz_sensor_msgs.FluidPressure)
    MergeFrom(*source);
  }
}

void FluidPressure::MergeFrom(const FluidPressure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz_sensor_msgs.FluidPressure)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::gz_std_msgs::Header::MergeFrom(from.header());
    }
    if (from.has_fluid_pressure()) {
      set_fluid_pressure(from.fluid_pressure());
    }
    if (from.has_variance()) {
      set_variance(from.variance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FluidPressure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz_sensor_msgs.FluidPressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FluidPressure::CopyFrom(const FluidPressure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz_sensor_msgs.FluidPressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FluidPressure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  return true;
}

void FluidPressure::Swap(FluidPressure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FluidPressure::InternalSwap(FluidPressure* other) {
  std::swap(header_, other->header_);
  std::swap(fluid_pressure_, other->fluid_pressure_);
  std::swap(variance_, other->variance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FluidPressure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FluidPressure_descriptor_;
  metadata.reflection = FluidPressure_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FluidPressure

// required .gz_std_msgs.Header header = 1;
bool FluidPressure::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FluidPressure::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void FluidPressure::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void FluidPressure::clear_header() {
  if (header_ != NULL) header_->::gz_std_msgs::Header::Clear();
  clear_has_header();
}
const ::gz_std_msgs::Header& FluidPressure::header() const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.FluidPressure.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::gz_std_msgs::Header* FluidPressure::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::gz_std_msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:gz_sensor_msgs.FluidPressure.header)
  return header_;
}
::gz_std_msgs::Header* FluidPressure::release_header() {
  // @@protoc_insertion_point(field_release:gz_sensor_msgs.FluidPressure.header)
  clear_has_header();
  ::gz_std_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void FluidPressure::set_allocated_header(::gz_std_msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_sensor_msgs.FluidPressure.header)
}

// required double fluid_pressure = 2;
bool FluidPressure::has_fluid_pressure() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FluidPressure::set_has_fluid_pressure() {
  _has_bits_[0] |= 0x00000002u;
}
void FluidPressure::clear_has_fluid_pressure() {
  _has_bits_[0] &= ~0x00000002u;
}
void FluidPressure::clear_fluid_pressure() {
  fluid_pressure_ = 0;
  clear_has_fluid_pressure();
}
 double FluidPressure::fluid_pressure() const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.FluidPressure.fluid_pressure)
  return fluid_pressure_;
}
 void FluidPressure::set_fluid_pressure(double value) {
  set_has_fluid_pressure();
  fluid_pressure_ = value;
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.FluidPressure.fluid_pressure)
}

// required double variance = 3;
bool FluidPressure::has_variance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FluidPressure::set_has_variance() {
  _has_bits_[0] |= 0x00000004u;
}
void FluidPressure::clear_has_variance() {
  _has_bits_[0] &= ~0x00000004u;
}
void FluidPressure::clear_variance() {
  variance_ = 0;
  clear_has_variance();
}
 double FluidPressure::variance() const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.FluidPressure.variance)
  return variance_;
}
 void FluidPressure::set_variance(double value) {
  set_has_variance();
  variance_ = value;
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.FluidPressure.variance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_sensor_msgs

// @@protoc_insertion_point(global_scope)
