// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RollPitchYawrateThrust.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RollPitchYawrateThrust.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gz_mav_msgs {

namespace {

const ::google::protobuf::Descriptor* RollPitchYawrateThrust_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RollPitchYawrateThrust_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RollPitchYawrateThrust_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_RollPitchYawrateThrust_2eproto() {
  protobuf_AddDesc_RollPitchYawrateThrust_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RollPitchYawrateThrust.proto");
  GOOGLE_CHECK(file != NULL);
  RollPitchYawrateThrust_descriptor_ = file->message_type(0);
  static const int RollPitchYawrateThrust_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollPitchYawrateThrust, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollPitchYawrateThrust, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollPitchYawrateThrust, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollPitchYawrateThrust, yaw_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollPitchYawrateThrust, thrust_),
  };
  RollPitchYawrateThrust_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RollPitchYawrateThrust_descriptor_,
      RollPitchYawrateThrust::default_instance_,
      RollPitchYawrateThrust_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollPitchYawrateThrust, _has_bits_[0]),
      -1,
      -1,
      sizeof(RollPitchYawrateThrust),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollPitchYawrateThrust, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RollPitchYawrateThrust_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RollPitchYawrateThrust_descriptor_, &RollPitchYawrateThrust::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RollPitchYawrateThrust_2eproto() {
  delete RollPitchYawrateThrust::default_instance_;
  delete RollPitchYawrateThrust_reflection_;
}

void protobuf_AddDesc_RollPitchYawrateThrust_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_RollPitchYawrateThrust_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gz_std_msgs::protobuf_AddDesc_Header_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034RollPitchYawrateThrust.proto\022\013gz_mav_m"
    "sgs\032\014Header.proto\032\016vector3d.proto\"\223\001\n\026Ro"
    "llPitchYawrateThrust\022#\n\006header\030\001 \002(\0132\023.g"
    "z_std_msgs.Header\022\014\n\004roll\030\002 \002(\001\022\r\n\005pitch"
    "\030\003 \002(\001\022\020\n\010yaw_rate\030\004 \002(\001\022%\n\006thrust\030\005 \002(\013"
    "2\025.gazebo.msgs.Vector3d", 223);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RollPitchYawrateThrust.proto", &protobuf_RegisterTypes);
  RollPitchYawrateThrust::default_instance_ = new RollPitchYawrateThrust();
  RollPitchYawrateThrust::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RollPitchYawrateThrust_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RollPitchYawrateThrust_2eproto {
  StaticDescriptorInitializer_RollPitchYawrateThrust_2eproto() {
    protobuf_AddDesc_RollPitchYawrateThrust_2eproto();
  }
} static_descriptor_initializer_RollPitchYawrateThrust_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RollPitchYawrateThrust::kHeaderFieldNumber;
const int RollPitchYawrateThrust::kRollFieldNumber;
const int RollPitchYawrateThrust::kPitchFieldNumber;
const int RollPitchYawrateThrust::kYawRateFieldNumber;
const int RollPitchYawrateThrust::kThrustFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RollPitchYawrateThrust::RollPitchYawrateThrust()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz_mav_msgs.RollPitchYawrateThrust)
}

void RollPitchYawrateThrust::InitAsDefaultInstance() {
  header_ = const_cast< ::gz_std_msgs::Header*>(&::gz_std_msgs::Header::default_instance());
  thrust_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
}

RollPitchYawrateThrust::RollPitchYawrateThrust(const RollPitchYawrateThrust& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gz_mav_msgs.RollPitchYawrateThrust)
}

void RollPitchYawrateThrust::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  roll_ = 0;
  pitch_ = 0;
  yaw_rate_ = 0;
  thrust_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RollPitchYawrateThrust::~RollPitchYawrateThrust() {
  // @@protoc_insertion_point(destructor:gz_mav_msgs.RollPitchYawrateThrust)
  SharedDtor();
}

void RollPitchYawrateThrust::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete thrust_;
  }
}

void RollPitchYawrateThrust::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RollPitchYawrateThrust::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RollPitchYawrateThrust_descriptor_;
}

const RollPitchYawrateThrust& RollPitchYawrateThrust::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RollPitchYawrateThrust_2eproto();
  return *default_instance_;
}

RollPitchYawrateThrust* RollPitchYawrateThrust::default_instance_ = NULL;

RollPitchYawrateThrust* RollPitchYawrateThrust::New(::google::protobuf::Arena* arena) const {
  RollPitchYawrateThrust* n = new RollPitchYawrateThrust;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RollPitchYawrateThrust::Clear() {
// @@protoc_insertion_point(message_clear_start:gz_mav_msgs.RollPitchYawrateThrust)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RollPitchYawrateThrust, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RollPitchYawrateThrust*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(roll_, yaw_rate_);
    if (has_header()) {
      if (header_ != NULL) header_->::gz_std_msgs::Header::Clear();
    }
    if (has_thrust()) {
      if (thrust_ != NULL) thrust_->::gazebo::msgs::Vector3d::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RollPitchYawrateThrust::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz_mav_msgs.RollPitchYawrateThrust)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gz_std_msgs.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_roll;
        break;
      }

      // required double roll = 2;
      case 2: {
        if (tag == 17) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_pitch;
        break;
      }

      // required double pitch = 3;
      case 3: {
        if (tag == 25) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_yaw_rate;
        break;
      }

      // required double yaw_rate = 4;
      case 4: {
        if (tag == 33) {
         parse_yaw_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_rate_)));
          set_has_yaw_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_thrust;
        break;
      }

      // required .gazebo.msgs.Vector3d thrust = 5;
      case 5: {
        if (tag == 42) {
         parse_thrust:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thrust()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz_mav_msgs.RollPitchYawrateThrust)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz_mav_msgs.RollPitchYawrateThrust)
  return false;
#undef DO_
}

void RollPitchYawrateThrust::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz_mav_msgs.RollPitchYawrateThrust)
  // required .gz_std_msgs.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // required double roll = 2;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->roll(), output);
  }

  // required double pitch = 3;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->pitch(), output);
  }

  // required double yaw_rate = 4;
  if (has_yaw_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->yaw_rate(), output);
  }

  // required .gazebo.msgs.Vector3d thrust = 5;
  if (has_thrust()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->thrust_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gz_mav_msgs.RollPitchYawrateThrust)
}

::google::protobuf::uint8* RollPitchYawrateThrust::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gz_mav_msgs.RollPitchYawrateThrust)
  // required .gz_std_msgs.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // required double roll = 2;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->roll(), target);
  }

  // required double pitch = 3;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->pitch(), target);
  }

  // required double yaw_rate = 4;
  if (has_yaw_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->yaw_rate(), target);
  }

  // required .gazebo.msgs.Vector3d thrust = 5;
  if (has_thrust()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->thrust_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz_mav_msgs.RollPitchYawrateThrust)
  return target;
}

int RollPitchYawrateThrust::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gz_mav_msgs.RollPitchYawrateThrust)
  int total_size = 0;

  if (has_header()) {
    // required .gz_std_msgs.Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  if (has_roll()) {
    // required double roll = 2;
    total_size += 1 + 8;
  }

  if (has_pitch()) {
    // required double pitch = 3;
    total_size += 1 + 8;
  }

  if (has_yaw_rate()) {
    // required double yaw_rate = 4;
    total_size += 1 + 8;
  }

  if (has_thrust()) {
    // required .gazebo.msgs.Vector3d thrust = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thrust_);
  }

  return total_size;
}
int RollPitchYawrateThrust::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gz_mav_msgs.RollPitchYawrateThrust)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .gz_std_msgs.Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);

    // required double roll = 2;
    total_size += 1 + 8;

    // required double pitch = 3;
    total_size += 1 + 8;

    // required double yaw_rate = 4;
    total_size += 1 + 8;

    // required .gazebo.msgs.Vector3d thrust = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thrust_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollPitchYawrateThrust::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz_mav_msgs.RollPitchYawrateThrust)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RollPitchYawrateThrust* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RollPitchYawrateThrust>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz_mav_msgs.RollPitchYawrateThrust)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz_mav_msgs.RollPitchYawrateThrust)
    MergeFrom(*source);
  }
}

void RollPitchYawrateThrust::MergeFrom(const RollPitchYawrateThrust& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz_mav_msgs.RollPitchYawrateThrust)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::gz_std_msgs::Header::MergeFrom(from.header());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_yaw_rate()) {
      set_yaw_rate(from.yaw_rate());
    }
    if (from.has_thrust()) {
      mutable_thrust()->::gazebo::msgs::Vector3d::MergeFrom(from.thrust());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RollPitchYawrateThrust::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz_mav_msgs.RollPitchYawrateThrust)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollPitchYawrateThrust::CopyFrom(const RollPitchYawrateThrust& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz_mav_msgs.RollPitchYawrateThrust)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollPitchYawrateThrust::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  if (has_thrust()) {
    if (!this->thrust_->IsInitialized()) return false;
  }
  return true;
}

void RollPitchYawrateThrust::Swap(RollPitchYawrateThrust* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RollPitchYawrateThrust::InternalSwap(RollPitchYawrateThrust* other) {
  std::swap(header_, other->header_);
  std::swap(roll_, other->roll_);
  std::swap(pitch_, other->pitch_);
  std::swap(yaw_rate_, other->yaw_rate_);
  std::swap(thrust_, other->thrust_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RollPitchYawrateThrust::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RollPitchYawrateThrust_descriptor_;
  metadata.reflection = RollPitchYawrateThrust_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RollPitchYawrateThrust

// required .gz_std_msgs.Header header = 1;
bool RollPitchYawrateThrust::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RollPitchYawrateThrust::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void RollPitchYawrateThrust::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void RollPitchYawrateThrust::clear_header() {
  if (header_ != NULL) header_->::gz_std_msgs::Header::Clear();
  clear_has_header();
}
const ::gz_std_msgs::Header& RollPitchYawrateThrust::header() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.RollPitchYawrateThrust.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::gz_std_msgs::Header* RollPitchYawrateThrust::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::gz_std_msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:gz_mav_msgs.RollPitchYawrateThrust.header)
  return header_;
}
::gz_std_msgs::Header* RollPitchYawrateThrust::release_header() {
  // @@protoc_insertion_point(field_release:gz_mav_msgs.RollPitchYawrateThrust.header)
  clear_has_header();
  ::gz_std_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void RollPitchYawrateThrust::set_allocated_header(::gz_std_msgs::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_mav_msgs.RollPitchYawrateThrust.header)
}

// required double roll = 2;
bool RollPitchYawrateThrust::has_roll() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RollPitchYawrateThrust::set_has_roll() {
  _has_bits_[0] |= 0x00000002u;
}
void RollPitchYawrateThrust::clear_has_roll() {
  _has_bits_[0] &= ~0x00000002u;
}
void RollPitchYawrateThrust::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
 double RollPitchYawrateThrust::roll() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.RollPitchYawrateThrust.roll)
  return roll_;
}
 void RollPitchYawrateThrust::set_roll(double value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:gz_mav_msgs.RollPitchYawrateThrust.roll)
}

// required double pitch = 3;
bool RollPitchYawrateThrust::has_pitch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RollPitchYawrateThrust::set_has_pitch() {
  _has_bits_[0] |= 0x00000004u;
}
void RollPitchYawrateThrust::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000004u;
}
void RollPitchYawrateThrust::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
 double RollPitchYawrateThrust::pitch() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.RollPitchYawrateThrust.pitch)
  return pitch_;
}
 void RollPitchYawrateThrust::set_pitch(double value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:gz_mav_msgs.RollPitchYawrateThrust.pitch)
}

// required double yaw_rate = 4;
bool RollPitchYawrateThrust::has_yaw_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RollPitchYawrateThrust::set_has_yaw_rate() {
  _has_bits_[0] |= 0x00000008u;
}
void RollPitchYawrateThrust::clear_has_yaw_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
void RollPitchYawrateThrust::clear_yaw_rate() {
  yaw_rate_ = 0;
  clear_has_yaw_rate();
}
 double RollPitchYawrateThrust::yaw_rate() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.RollPitchYawrateThrust.yaw_rate)
  return yaw_rate_;
}
 void RollPitchYawrateThrust::set_yaw_rate(double value) {
  set_has_yaw_rate();
  yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:gz_mav_msgs.RollPitchYawrateThrust.yaw_rate)
}

// required .gazebo.msgs.Vector3d thrust = 5;
bool RollPitchYawrateThrust::has_thrust() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RollPitchYawrateThrust::set_has_thrust() {
  _has_bits_[0] |= 0x00000010u;
}
void RollPitchYawrateThrust::clear_has_thrust() {
  _has_bits_[0] &= ~0x00000010u;
}
void RollPitchYawrateThrust::clear_thrust() {
  if (thrust_ != NULL) thrust_->::gazebo::msgs::Vector3d::Clear();
  clear_has_thrust();
}
const ::gazebo::msgs::Vector3d& RollPitchYawrateThrust::thrust() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.RollPitchYawrateThrust.thrust)
  return thrust_ != NULL ? *thrust_ : *default_instance_->thrust_;
}
::gazebo::msgs::Vector3d* RollPitchYawrateThrust::mutable_thrust() {
  set_has_thrust();
  if (thrust_ == NULL) {
    thrust_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:gz_mav_msgs.RollPitchYawrateThrust.thrust)
  return thrust_;
}
::gazebo::msgs::Vector3d* RollPitchYawrateThrust::release_thrust() {
  // @@protoc_insertion_point(field_release:gz_mav_msgs.RollPitchYawrateThrust.thrust)
  clear_has_thrust();
  ::gazebo::msgs::Vector3d* temp = thrust_;
  thrust_ = NULL;
  return temp;
}
void RollPitchYawrateThrust::set_allocated_thrust(::gazebo::msgs::Vector3d* thrust) {
  delete thrust_;
  thrust_ = thrust;
  if (thrust) {
    set_has_thrust();
  } else {
    clear_has_thrust();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_mav_msgs.RollPitchYawrateThrust.thrust)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_mav_msgs

// @@protoc_insertion_point(global_scope)
